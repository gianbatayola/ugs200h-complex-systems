extensions [array]
;; agents have a probablity to reproduce and a strategy
turtles-own [
  cooperate-with-same? ;; probability agents will cooperate with the same color
  cooperate-with-different? ;; probability agents will cooperate with a different color
  raw-wealth
  scaled-wealth
  original
  interactable
]

globals [
  ;; the remaining variables support the replication of published experiments
  meet                  ;; how many interactions occurred this turn
  meet-agg              ;; how many interactions occurred through the run
  last100meet           ;; meet for the last 100 ticks
  meetown               ;; what number of individuals met someone of their own color this turn
  meetown-agg           ;; what number of individuals met someone of their own color throughout the run
  last100meetown        ;; meetown for the last 100 ticks
  meetother             ;; what number of individuals met someone of a different color this turn
  meetother-agg         ;; what number of individuals met someone of a different color throughout the run
  last100meetother      ;; meetother for the last 100 ticks
  coopown               ;; how many interactions this turn were cooperating with the same color
  coopown-agg           ;; how many interactions throughout the run were cooperating with the same color
  last100coopown        ;; coopown for the last 100 ticks
  coopother             ;; how many interactions this turn were cooperating with a different color
  coopother-agg         ;; how many interactions throughout the run were cooperating with a different color
  defother              ;; how many interactions this turn were defecting with a different color
  defother-agg          ;; how many interactions throughout the run were defecting with a different color
  last100defother       ;; defother for the last 100 ticks
  last100cc             ;; how many cooperate-cooperate genotypes have there been in the last 100 ticks
  last100cd             ;; how many cooperate-defect genotypes have there been in the last 100 ticks
  last100dc             ;; how many defect-cooperate genotypes have there been in the last 100 ticks
  last100dd             ;; how many defect-defect genotypes have there been in the last 100 ticks
  last100consist-ethno  ;; how many interactions consistent with ethnocentrism in the last 100 ticks
  last100coop           ;; how many interactions have been cooperation in the last 100 ticks
  mine                  ;; the wealth that an agent has
  yours                 ;; the wealth that another agent has while interacting
  wealth-list          ;; a list of turtles
  percentile75          ;; the 75th percentile of wealth
  percentile50          ;; the 50th percentile of wealth
  percentile25          ;; the 25th percentile of wealth
  northneighborcolor    ;; color of the neighbor in north
  eastneighborcolor     ;; color of the neighbor in east
  southneighborcolor    ;; color of the neighbor in south
  westneighborcolor     ;; color of the neighbor in west
  scale
  in

]

to setup-empty
  clear-all
  initialize-variables
  reset-ticks
end

;; creates a world with an agent on each patch
to setup-full
  clear-all
  initialize-variables
  ask patches [ create-turtle ]
  form-teams
  reset-ticks
end

to initialize-variables
  ;; initialize all the variables
  set meetown 0
  set meetown-agg 0
  set meet 0
  set meet-agg 0
  set coopown 0
  set coopown-agg 0
  set defother 0
  set defother-agg 0
  set meetother 0
  set meetother-agg 0
  set coopother 0
  set coopother-agg 0
  set last100dd []
  set last100cd []
  set last100cc []
  set last100dc []
  set last100coopown []
  set last100defother []
  set last100consist-ethno []
  set last100meetown []
  set last100meetother []
  set last100meet []
  set last100coop []
  set mine 0
  set yours 0
  set wealth-list []
  set percentile75 0
  set percentile50 0
  set percentile25 0
  set scale 1
  set in 1

end

;; creates a new agent in the world
to create-turtle  ;; patch procedure
  sprout 1 [
    set raw-wealth random 100
    if raw-wealth > 75 [ set color white]
    if raw-wealth <= 75 and raw-wealth > 50 [ set color green ]
    if raw-wealth <= 50 and raw-wealth > 25 [ set color yellow ]
    if raw-wealth <= 25 [ set color red ]
    set scaled-wealth raw-wealth
    set original raw-wealth
    ;; determine the strategy for interacting with someone of the same color
    set cooperate-with-same? (random-float 1.0 < chance-cooperate-with-same)
    ;; determine the strategy for interacting with someone of a different color
    set cooperate-with-different? (random-float 1.0 < chance-cooperate-with-different)
    ;; change the shape of the agent on the basis of the strategy
    set interactable 0

    update-shape

  ]

end

to-report random-color
  report one-of [red white yellow green]
end

;; this is used to clear stats that change between each tick
to clear-stats
  set meetown 0
  set meet 0
  set coopown 0
  set defother 0
  set meetother 0
  set coopother 0
  ;;set northneighborcolor 0
  ;;set eastneighborcolor 0
  ;;set southneighborcolor 0
  ;;set westneighborcolor 0
end

;; the main routine
to go
  clear-stats     ;; clear the turn based stats
  ;;immigrate       ;; new agents immigrate into the world
  ask turtles [update-state]
  ;;ask turtles [update-state-team]
  ask turtles [resetraw]
  ;; reset the probability to reproduce
  ;;ask turtles [ set ptr initial-ptr ]
  set wealth-list []
  ;; have all of the agents interact with other agents if they can

  ask turtles [ interact ]
  ;;ask turtles [interact-team]
  ask turtles [self-gain]
  ;; ask turtles [self-gain-team]
  ask turtles [addwealth]
  set wealth-list sort-by > wealth-list
  if length wealth-list > 0 [set scale first wealth-list]
  ask turtles[toscale]
  ;get-percentiles
  ;;ask turtles [colorandscale]
  ;; transact and then update your location
  ;;ask turtles with [ wealth > 0 ] [ transact ]
  ;; now they reproduce
  ;;ask turtles [ reproduce ]
  ;;death           ;; kill some of the agents
  update-stats    ;; update the states for the aggregate and last 100 ticks
  ;;ask turtles [recolor]
  recolor-turtles
  death

  tick
  if ticks mod check-grades-every = 0 [
  ask turtles [
    mutate
  ]
]
  if ticks = 100 [stop]
end

to form-teams
  ask patches [
  if pxcor mod 2 = 0 and (pycor + 1) mod 2 = 0 ;top left in box
    [ask turtles-at 0 0 [create-link-with one-of turtles-at 1 0 create-link-with one-of turtles-at 0 -1 create-link-with one-of turtles-at 1 -1 ]]
  if (pxcor + 1) mod 2 = 0 and (pycor + 1) mod 2 = 0 ;top right in box
    [ask turtles-at 0 0 [create-link-with one-of turtles-at -1 0 create-link-with one-of turtles-at 0 -1 create-link-with one-of turtles-at -1 -1 ]]
 if pxcor mod 2 = 0 and pycor mod 2 = 0  ;bottom left in box
    [ask turtles-at 0 0 [create-link-with one-of turtles-at 1 0 create-link-with one-of turtles-at 0 1 create-link-with one-of turtles-at 1 1 ]]
  if (pxcor + 1)  mod 2 = 0 and pycor mod 2 = 0 ;bottom right in box
    [ask turtles-at 0 0 [create-link-with one-of turtles-at -1 0 create-link-with one-of turtles-at 0 1 create-link-with one-of turtles-at -1 1 ]]
  ]
end


to self-gain
  if interactable = 0 [set raw-wealth raw-wealth * self-gain-rate]
end

to update-state
 if interactable > 0 [set interactable interactable - 1]
 let leave floor random-exponential 1  ;; maybe future use slider 1 = mean of dirstibution
 set interactable interactable + leave
end

to update-state-team
 if interactable > 0 [set interactable 0]
 ;;let leave floor random-exponential 1  ;; maybe future use slider
 ;;set interactable interactable + leave
end
to resetraw
 set raw-wealth scaled-wealth
end
;to get-percentiles
 ; set percentile50 median wealth-list
  ;let ending length wealth-list
  ;let middle ending * .5
  ;let lower sublist wealth-list middle ending
  ;let upper sublist wealth-list 0 middle
  ;set percentile75 median upper
  ;set percentile25 median lower

;end

to addwealth
  set wealth-list fput raw-wealth wealth-list
end

to toscale
  set scaled-wealth raw-wealth / scale * 100
end


to transact
  ;; give a dollar to another turtle
  ;;set wealth wealth + 1
  ;;ask one-of other turtles [ set wealth wealth + 1 ]
  set mine raw-wealth
  ask one-of turtles-on neighbors4 [set yours raw-wealth]
  set raw-wealth raw-wealth  + yours * exchange_rate - raw-wealth * cost-of-giving
  ask one-of turtles-on neighbors4 [set raw-wealth raw-wealth + mine * exchange_rate - raw-wealth * cost-of-giving]
end

to interact  ;; turtle procedure
  let decider [[0 1] [1 0] [-1 0] [0 -1]]   ;; create list of locations
  set decider shuffle decider               ;; shuffle list

  while [interactable = 0 and length decider > 0 ]         ;; must still have locations and be interactable
  [


   ;;set check check + 1
   let location first decider
    let x1 first location
    let y1 last location
   if length [interactable] of turtles-at x1 y1 > 0  ;; make sure turtle exists at location
   [
    set in first [interactable] of turtles-at x1 y1
    ;; take first location
    if in = 0    ;; make sure other turtle interatcable
    [ ;;set check1 check1 + 1
      let neighborcolor first [color] of turtles-at x1 y1
      set meet meet + 1
      set meet-agg meet-agg + 1
      if (neighborcolor = color)
      [
         ;;set check2 check2 + 1
         set meetown meetown + 1
         set meetown-agg meetown-agg + 1

         if cooperate-with-same? and  first [cooperate-with-same?] of turtles-at first location last location
         [   set coopown coopown + 1
             set coopown-agg coopown-agg + 1
             set mine raw-wealth
             set yours first [raw-wealth] of turtles-at x1 y1
             set raw-wealth raw-wealth  + yours * exchange_rate - mine * cost-of-giving
             ask turtles-at x1 y1                          ;; responder now gains
             [
                 set raw-wealth raw-wealth  + mine * exchange_rate - yours * cost-of-giving
                 set interactable 1
              ]
             set interactable 1     ;; no more interactions

        ]

    ]
    if neighborcolor != color
    [
       set meetother meetother + 1
       set meetother-agg meetother-agg + 1
       if cooperate-with-different? and  first [cooperate-with-different?] of turtles-at x1 y1
       [
         set coopother coopother + 1
         set coopother-agg coopother-agg + 1
         set mine raw-wealth                             ;; wealth of turtle initiaiting
         set yours first [raw-wealth] of turtles-at x1 y1   ; weath of responder
         set raw-wealth raw-wealth  + yours * exchange_rate - mine * cost-of-giving   ;; new wealth of initiator
         ask turtles-at x1 y1                          ;; responder now gains
         [
             set raw-wealth raw-wealth  + mine * exchange_rate - yours * cost-of-giving
             set interactable 1
         ]
         set interactable 1     ;; no more interactions

    ]
  ]

   ]
  ]
  set decider remove location decider  ;;remove location used
  ]
end

to self-gain-team

  while [interactable < 4]
  [ set raw-wealth raw-wealth * 1.2
    set interactable interactable + 1
  ]
end
to interact-team  ;; turtle procedure

  let myid xcor mod 2 + 2 * (ycor mod 2)
  let decider [[0 -1] [1 0] [1 -1] ]
  if myid = 0
  [set decider [[0 -1] [1 0] [1 -1] ] ] ;; create list of locations
  if myid = 1
  [ set decider [[-1 -1] [-1 0] [0 -1] ]
  ]

  if myid = 2
  [ set decider [[0 1] [1 0] [1 1] ]
  ]

  if myid = 3
  [ set decider [[-1 0] [0 1] [-1 1] ]
  ]
  set decider shuffle decider               ;; shuffle list

  while [length decider > 0 ]         ;; must still have locations and be interactable
  [


   ;;set check check + 1
   let location first decider
    let x1 first location
    let y1 last location
   if length [interactable] of turtles-at x1 y1 > 0  ;; make sure turtle exists at location
   [
    set in first [interactable] of turtles-at x1 y1
    ;; take first location
    if in < 4    ;; make sure other turtle interatcable
    [ ;;set check1 check1 + 1
      let neighborcolor first [color] of turtles-at x1 y1
      set meet meet + 1
      set meet-agg meet-agg + 1
      if (neighborcolor = color)
      [
         ;;set check2 check2 + 1
         set meetown meetown + 1
         set meetown-agg meetown-agg + 1

         if cooperate-with-same? and  first [cooperate-with-same?] of turtles-at first location last location
         [   set coopown coopown + 1
             set coopown-agg coopown-agg + 1
             set mine raw-wealth
             set yours first [raw-wealth] of turtles-at x1 y1
             set raw-wealth raw-wealth  + yours * exchange_rate - mine * cost-of-giving
           ;;  ask turtles-at x1 y1                          ;; responder now gains
           ;;  [
             ;;    set raw-wealth raw-wealth  + mine * exchange_rate - yours * cost-of-giving
               ;;  set interactable 1
             ;; ]
             set interactable interactable + 1     ;; no more interactions

        ]

    ]
    if neighborcolor != color
    [
       set meetother meetother + 1
       set meetother-agg meetother-agg + 1
       if cooperate-with-different? and  first [cooperate-with-different?] of turtles-at x1 y1
       [
         set coopother coopother + 1
         set coopother-agg coopother-agg + 1
         set mine raw-wealth                             ;; wealth of turtle initiaiting
         set yours first [raw-wealth] of turtles-at x1 y1   ; weath of responder
         set raw-wealth raw-wealth  + yours * exchange_rate - mine * cost-of-giving   ;; new wealth of initiator
         ;;ask turtles-at x1 y1                          ;; responder now gains
         ;;[
           ;;  set raw-wealth raw-wealth  + mine * exchange_rate - yours * cost-of-giving
             ;;set interactable 1
         ;;]
         set interactable interactable + 1    ;; no more interactions

    ]
  ]

   ]
  ]
  set decider remove location decider  ;;remove location used
  ]
end

to mutate  ;; turtle procedure
  if color != white and random-float 1.0 < mutation-rate [
    set cooperate-with-same? not cooperate-with-same?
  ]
  if color != white and random-float 1.0 < mutation-rate [
    set cooperate-with-different? not cooperate-with-different?
  ]
   ;;make sure the shape of the agent reflects its strategy
  update-shape
end

to death
  ;; check to see if a random variable is less than the death rate for each agent
  ask turtles [
    if random-float 1.0 < death-rate [ die ]
  ]
end

;; make sure the shape matches the strategy
to update-shape
  ;; if the agent cooperates with same they are a circle
  ifelse cooperate-with-same? [
    ifelse cooperate-with-different?
      [ set shape "circle" ]    ;; filled in circle (altruist)
      [ set shape "circle 2" ]  ;; empty circle (ethnocentric)
  ]
   ;; if the agent doesn't cooperate with same they are a square
  [
    ifelse cooperate-with-different?
      [ set shape "square" ]    ;; filled in square (cosmopolitan)
      [ set shape "square 2" ]  ;; empty square (egoist)
  ]
end


to recolor-turtles
  set wealth-list sort-on[raw-wealth]turtles
  set percentile75 [raw-wealth] of item (0.75 * length(wealth-list)) wealth-list      ;; fixed hardcode
  set percentile50 [raw-wealth] of item (0.50 * length(wealth-list)) wealth-list
  set percentile25 [raw-wealth] of item (0.25 * length(wealth-list)) wealth-list
  ask turtles
  [ifelse (raw-wealth >= percentile75)
    [set color white]
    [ifelse (raw-wealth < percentile75 and raw-wealth >= percentile50)
      [set color green]
      [ifelse (raw-wealth < percentile50 and raw-wealth >= percentile25)
        [set color yellow]
        [set color red] ] ] ]

end


;end
;; this routine calculates a moving average of some stats over the last 100 ticks
to update-stats
  ;;set last100dd        shorten lput (count turtles with [shape = "square 2"]) last100dd
  ;;set last100cc        shorten lput (count turtles with [shape = "circle"]) last100cc
  ;;set last100cd        shorten lput (count turtles with [shape = "circle 2"]) last100cd
  ;;set last100dc        shorten lput (count turtles with [shape = "square"]) last100dc
  set last100coopown   shorten lput coopown last100coopown
  set last100defother  shorten lput defother last100defother
  set last100meetown   shorten lput meetown last100meetown
  set last100coop      shorten lput (coopown + coopother) last100coop
  set last100meet      shorten lput meet last100meet
  set last100meetother shorten lput meetother last100meetother
end

;; this is used to keep all of the last100 lists the right length
to-report shorten [the-list]
  ifelse length the-list > 100
    [ report butfirst the-list ]
    [ report the-list ]
end

;; these are used in the BehaviorSpace experiments

to-report meetown-percent
  report meetown / max list 1 meet
end
to-report meetown-agg-percent
  report meetown-agg / max list 1 meet-agg
end
to-report coopown-percent
  report coopown / max list 1 meetown
end
to-report coopown-agg-percent
  report coopown-agg / max list 1 meetown-agg
end
to-report defother-percent
  report defother / max list 1 meetother
end
to-report defother-agg-percent
  report defother-agg / max list 1 meetother-agg
end
to-report consist-ethno-percent
  report (defother + coopown) / (max list 1 meet )
end
to-report consist-ethno-agg-percent
  report (defother-agg + coopown-agg) / (max list 1 meet-agg )
end
to-report coop-percent
  report (coopown + coopother) / (max list 1 meet )
end
to-report coop-agg-percent
  report (coopown-agg + coopother-agg) / (max list 1 meet-agg)
end
to-report cc-count
  report sum last100cc / max list 1 length last100cc
end
to-report cd-count
  report sum last100cd / max list 1 length last100cd
end
to-report dc-count
  report sum last100dc / max list 1 length last100dc
end
to-report dd-count
  report sum last100dd / max list 1 length last100dd
end
to-report cc-percent
  report cc-count / (max list 1 (cc-count + cd-count + dc-count + dd-count))
end
to-report cd-percent
  report cd-count / (max list 1 (cc-count + cd-count + dc-count + dd-count))
end
to-report dc-percent
  report dc-count / (max list 1 (cc-count + cd-count + dc-count + dd-count))
end
to-report dd-percent
  report dd-count / (max list 1 (cc-count + cd-count + dc-count + dd-count))
end
to-report last100coopown-percent
  report sum last100coopown / max list 1 sum last100meetown
end
to-report last100defother-percent
  report sum last100defother / max list 1 sum last100meetother
end
to-report last100consist-ethno-percent
  report (sum last100defother + sum last100coopown) / max list 1 sum last100meet
end
to-report last100meetown-percent
  report sum last100meetown / max list 1 sum last100meet
end
to-report last100coop-percent
  report sum last100coop / max list 1 sum last100meet
end
to-report northneighborcolor1
  report northneighborcolor
end
to-report eastneighborcolor1
  report eastneighborcolor
end
to-report southneighborcolor1
  report southneighborcolor
end
to-report westneighborcolor1
  report westneighborcolor
end


; Copyright 2003 Uri Wilensky.
; See Info tab for full copyright and license.
